{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"Module implementing the IndRNN cell\"\"\"\n",
    "\n",
    "from tensorflow.python.ops import math_ops\n",
    "from tensorflow.python.ops import init_ops\n",
    "from tensorflow.python.ops import nn_ops\n",
    "from tensorflow.python.ops import clip_ops\n",
    "from tensorflow.python.layers import base as base_layer\n",
    "\n",
    "try:\n",
    "  # TF 1.7+\n",
    "  from tensorflow.python.ops.rnn_cell_impl import LayerRNNCell\n",
    "except ImportError:\n",
    "  from tensorflow.python.ops.rnn_cell_impl import _LayerRNNCell as LayerRNNCell\n",
    "\n",
    "\n",
    "class IndRNNCell(LayerRNNCell):\n",
    "  \"\"\"Independently RNN Cell. Adapted from `rnn_cell_impl.BasicRNNCell`.\n",
    "\n",
    "  Each unit has a single recurrent weight connected to its last hidden state.\n",
    "\n",
    "  The implementation is based on:\n",
    "\n",
    "    https://arxiv.org/abs/1803.04831\n",
    "\n",
    "  Shuai Li, Wanqing Li, Chris Cook, Ce Zhu, Yanbo Gao\n",
    "  \"Independently Recurrent Neural Network (IndRNN): Building A Longer and\n",
    "  Deeper RNN\"\n",
    "\n",
    "  The default initialization values for recurrent weights, input weights and\n",
    "  biases are taken from:\n",
    "\n",
    "    https://arxiv.org/abs/1504.00941\n",
    "\n",
    "  Quoc V. Le, Navdeep Jaitly, Geoffrey E. Hinton\n",
    "  \"A Simple Way to Initialize Recurrent Networks of Rectified Linear Units\"\n",
    "\n",
    "  Args:\n",
    "    num_units: int, The number of units in the RNN cell.\n",
    "    recurrent_min_abs: float, minimum absolute value of each recurrent weight.\n",
    "    recurrent_max_abs: (optional) float, maximum absolute value of each\n",
    "      recurrent weight. For `relu` activation, `pow(2, 1/timesteps)` is\n",
    "      recommended. If None, recurrent weights will not be clipped.\n",
    "      Default: None.\n",
    "    recurrent_kernel_initializer: (optional) The initializer to use for the\n",
    "      recurrent weights. If None, every recurrent weight is initially set to 1.\n",
    "      Default: None.\n",
    "    input_kernel_initializer: (optional) The initializer to use for the input\n",
    "      weights. If None, the input weights are initialized from a random normal\n",
    "      distribution with `mean=0` and `stddev=0.001`. Default: None.\n",
    "    activation: Nonlinearity to use.  Default: `relu`.\n",
    "    reuse: (optional) Python boolean describing whether to reuse variables\n",
    "      in an existing scope.  If not `True`, and the existing scope already has\n",
    "      the given variables, an error is raised.\n",
    "    name: String, the name of the layer. Layers with the same name will\n",
    "      share weights, but to avoid mistakes we require reuse=True in such\n",
    "      cases.\n",
    "  \"\"\"\n",
    "\n",
    "  def __init__(self,\n",
    "               num_units,\n",
    "               recurrent_min_abs=0,\n",
    "               recurrent_max_abs=None,\n",
    "               recurrent_kernel_initializer=None,\n",
    "               input_kernel_initializer=None,\n",
    "               activation=None,\n",
    "               reuse=None,\n",
    "               name=None):\n",
    "    super(IndRNNCell, self).__init__(_reuse=reuse, name=name)\n",
    "\n",
    "    # Inputs must be 2-dimensional.\n",
    "    self.input_spec = base_layer.InputSpec(ndim=2)\n",
    "\n",
    "    self._num_units = num_units\n",
    "    self._recurrent_min_abs = recurrent_min_abs\n",
    "    self._recurrent_max_abs = recurrent_max_abs\n",
    "    self._recurrent_initializer = recurrent_kernel_initializer\n",
    "    self._input_initializer = input_kernel_initializer\n",
    "    self._activation = activation or nn_ops.relu\n",
    "\n",
    "  @property\n",
    "  def state_size(self):\n",
    "    return self._num_units\n",
    "\n",
    "  @property\n",
    "  def output_size(self):\n",
    "    return self._num_units\n",
    "\n",
    "  def build(self, inputs_shape):\n",
    "    if inputs_shape[1].value is None:\n",
    "      raise ValueError(\"Expected inputs.shape[-1] to be known, saw shape: %s\"\n",
    "                       % inputs_shape)\n",
    "\n",
    "    input_depth = inputs_shape[1].value\n",
    "    if self._input_initializer is None:\n",
    "      self._input_initializer = init_ops.random_normal_initializer(mean=0.0,\n",
    "                                                                   stddev=0.001)\n",
    "    self._input_kernel = self.add_variable(\n",
    "        \"input_kernel\",\n",
    "        shape=[input_depth, self._num_units],\n",
    "        initializer=self._input_initializer)\n",
    "\n",
    "    if self._recurrent_initializer is None:\n",
    "      self._recurrent_initializer = init_ops.constant_initializer(1.)\n",
    "    self._recurrent_kernel = self.add_variable(\n",
    "        \"recurrent_kernel\",\n",
    "        shape=[self._num_units],\n",
    "        initializer=self._recurrent_initializer)\n",
    "\n",
    "    # Clip the absolute values of the recurrent weights to the specified minimum\n",
    "    if self._recurrent_min_abs:\n",
    "      abs_kernel = math_ops.abs(self._recurrent_kernel)\n",
    "      min_abs_kernel = math_ops.maximum(abs_kernel, self._recurrent_min_abs)\n",
    "      self._recurrent_kernel = math_ops.multiply(\n",
    "          math_ops.sign(self._recurrent_kernel),\n",
    "          min_abs_kernel\n",
    "      )\n",
    "\n",
    "    # Clip the absolute values of the recurrent weights to the specified maximum\n",
    "    if self._recurrent_max_abs:\n",
    "      self._recurrent_kernel = clip_ops.clip_by_value(self._recurrent_kernel,\n",
    "                                                      -self._recurrent_max_abs,\n",
    "                                                      self._recurrent_max_abs)\n",
    "\n",
    "    self._bias = self.add_variable(\n",
    "        \"bias\",\n",
    "        shape=[self._num_units],\n",
    "        initializer=init_ops.zeros_initializer(dtype=self.dtype))\n",
    "\n",
    "    self.built = True\n",
    "\n",
    "  def call(self, inputs, state):\n",
    "    \"\"\"Run one time step of the IndRNN.\n",
    "\n",
    "    Calculates the output and new hidden state using the IndRNN equation\n",
    "\n",
    "      `output = new_state = act(W * input + u (*) state + b)`\n",
    "\n",
    "    where `*` is the matrix multiplication and `(*)` is the Hadamard product.\n",
    "\n",
    "    Args:\n",
    "      inputs: Tensor, 2-D tensor of shape `[batch, num_units]`.\n",
    "      state: Tensor, 2-D tensor of shape `[batch, num_units]` containing the\n",
    "        previous hidden state.\n",
    "\n",
    "    Returns:\n",
    "      A tuple containing the output and new hidden state. Both are the same\n",
    "        2-D tensor of shape `[batch, num_units]`.\n",
    "    \"\"\"\n",
    "    gate_inputs = math_ops.matmul(inputs, self._input_kernel)\n",
    "    recurrent_update = math_ops.multiply(state, self._recurrent_kernel)\n",
    "    gate_inputs = math_ops.add(gate_inputs, recurrent_update)\n",
    "    gate_inputs = nn_ops.bias_add(gate_inputs, self._bias)\n",
    "    output = self._activation(gate_inputs)\n",
    "    return output, output"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}